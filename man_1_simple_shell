.TH man 2 "28 Aug 2019" "0.1" "Simple Shell Holberton School"
.SH NAME
.B Simple Shell
- Command line interpreter
.SH SYNOPSIS
.B $ [command] - [options] [arguments]
.sp
.SH DESCRIPTION
Simple shell simulates the behavior of a unix shell 
.B
.sp
This program was created by first semester Holberton School students.
.sp
.B Run:
.RS
The program is compiled with the following command:
.sp
.B gcc -Wall -Werror -Wextra -pedantic *.c -o shell
.sp
To execute the program:
.sp
.B ./shell
.RE
.sp
.B Overview:
.RS
Simple shell interprets the commands passed by the standard input, this generates a child process with the system call fork(), in it the system call execve() will be called that is the one that is in charge of execute the program pointed to by filename, The arguments for execve() are an array of strings formed from the input,
and the environment variables. 
The child process will be replaced by the execution of the command, and the program will return to the parent process.
.RE
.sp
.SH SYNTAX
$ <command> <flags or options> <argument 1> <argument 2> ...
.RE
.sp
OR NON-INTERACTIVE MODE:
.RE
.sp
$ <command> | ./shell
.SS
.I echo
followed by the command in double quotes into ./shell. This mode doesn't print a prompt and executes the command directly.
.RE
.SS
Interactive mode:
<command>
.SS
EXAMPLES:
.SS
$ pwd
Prints the absolute path of the current directory
.SS
$ ls -la --author
will show a list of all files including hidden files of the current directory in long format with the authors of each file
.SS
$ cat filename
Will display the content of filename
.SS
Non-interactive mode:
.RE
.sp
EXAMPLE:
$ echo "ls -l" | ./shell
.sp
.RE
Will show the list of all files of current directory in long format, in non-interactive mode
.sp
.B Path search:
.RS
The PATH environment variable is a colon-delimited list of directories that your shell searches through when you enter a command.

Program files (executables) are kept in many different places on the Unix system. Your path tells the Unix shell where to look on the system when you request a particular program.
 If it doesn't find it, it searches for a builtin by that name.
If it's not a builtin, and the command is the full name of an executable, like /bin/ls, it will be executed. 
.RE
.sp
.B Builtins:
.RS
Simple Shell has two builtins that simulate the real shell builtins.
.sp
.RS
.B - exit [status]:
exits the program with an exit status of the value specified as an argument by the user.
.sp
.B - env:
prints the environment variables list to the standard output.
.B - cd
change directory
.sp
.SH SEE ALSO
DASH(1), access(2), chdir(2), execve(2), _exit(2), exit(3), fflush(3), fork(2), free(3), isatty(3), getcwd(3), malloc(3), open(2), read(2)
.SH BUGS
Simple shell only simulates the behavior of a shell and has not implemented some regular shell builtins, so if you try to run them will give an error message.
.SH AUTHOR
Valentin RÃºa Carrillo, Santiago Agudelo.                                    
